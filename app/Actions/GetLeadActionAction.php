<?php

namespace App\Actions;

use AmoCRM\Exceptions\AmoCRMApiException;
use AmoCRM\Exceptions\AmoCRMMissedTokenException;
use AmoCRM\Exceptions\AmoCRMoAuthApiException;
use App\Contracts\GetLeadActionContract;
use App\Models\Company;
use App\Models\Contact;
use App\Models\Lead;
use App\Services\AmoCRM;
use App\Utilities\StringUtils;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;

class GetLeadActionAction implements GetLeadActionContract {

    public function __invoke(Request $request) {
        try {
            $token = AmoCRM::instance()->getTokenFromEncryptedCookie();

            if ($token) {
                $accessToken = AmoCRM::instance()->getAccessTokenFromCookie($token);
                AmoCRM::instance()->setApiCredentials($token->baseDomain, $accessToken);

                Company::query()->delete();
                Lead::query()->delete();
                Contact::query()->delete();

                // –í—ã–∫–∞—á–∏–≤–∞–µ–º —Å–¥–µ–ª–∫–∏
                $leads = AmoCRM::instance()->getApiClient()->leads()->get();
                $leadCounter = 0;

                foreach ($leads as $value) {
                    $lead = $value->toArray();
                    $lead['custom_fields_values'] = json_encode($lead['custom_fields_values']);

                    if (array_key_exists('company', $lead)) {
                        $companyId = $lead['company']['id'];
                        $lead['company_id'] = $companyId;
                        unset($lead['company']);
                    }

                    try {
                        if (Lead::query()->create($lead)->save())
                            $leadCounter++;
                    } catch (QueryException $ex) {
                        error_log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–∞—á–∫–µ —Å–¥–µ–ª–æ–∫: ' . $ex->getMessage());
                    }
                }

                // –í—ã–∫–∞—á–∏–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
                $companies = AmoCRM::instance()->getApiClient()->companies()->get();
                $companyCounter = 0;

                foreach ($companies as $value) {
                    $company = $value->toArray();

                    if (!Lead::query()->where('company_id', $company['id'])->exists()) // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –±–µ–∑ —Å–¥–µ–ª–æ–∫
                        continue;

                    $company['custom_fields_values'] = json_encode($company['custom_fields_values']);

                    try {
                        if (Company::query()->create($company)->save())
                            $companyCounter++;
                    } catch (QueryException $ex) {
                        error_log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–∞—á–∫–µ –∫–æ–º–ø–∞–Ω–∏–π: ' . $ex->getMessage());
                    }
                }

                // –í—ã–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
                $contacts = AmoCRM::instance()->getApiClient()->contacts()->get();
                $contactCounter = 0;

                foreach ($contacts as $value) {
                    $contact = $value->toArray();
                    $companyId = $contact['company']['id'];

                    if (!Lead::query()->where('company_id', $companyId)->exists()) // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ —Å–¥–µ–ª–æ–∫
                        continue;

                    $contact['company_id'] = $companyId;
                    unset($contact['company']);
                    $contact['custom_fields_values'] = json_encode($contact['custom_fields_values']);

                    try {
                        if (Contact::query()->create($contact)->save())
                            $contactCounter++;
                    } catch (QueryException $ex) {
                        error_log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–∞—á–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ' . $ex->getMessage());
                    }
                }

                $decLead = StringUtils::getDeclinedString($leadCounter, ['—Å–¥–µ–ª–∫–∞', '—Å–¥–µ–ª–∫–∏', '—Å–¥–µ–ª–æ–∫']);
                $decCompany = StringUtils::getDeclinedString($companyCounter, ['–∫–æ–º–ø–∞–Ω–∏—è', '–∫–æ–º–ø–∞–Ω–∏–∏', '–∫–æ–º–ø–∞–Ω–∏–π']);
                $decContact = StringUtils::getDeclinedString($contactCounter, ['–∫–æ–Ω—Ç–∞–∫—Ç', '–∫–æ–Ω—Ç–∞–∫—Ç–∞', '–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤']);


                return view('unloaded_completed', [
                    'result' => "üöÄ –£—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω–æ $decLead, $decCompany –∏ $decContact!"
                ]);
            }
        } catch (AmoCRMApiException|AmoCRMMissedTokenException|AmoCRMoAuthApiException $ex) {
            $errorMessage = $ex->getMessage();

            return view('unloaded_completed', [
                'result' => "–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∏–∑ CRM: $errorMessage. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
            ]);
        }

        return view('unloaded_completed', [
            'result' => "–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∏–∑ CRM, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
        ]);
    }
}
